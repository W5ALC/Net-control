name: Build with CMake

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.5.3'
        host: 'linux'
        target: 'desktop'
        arch: 'gcc_64'
        
    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential libgl1-mesa-dev imagemagick \
          libxcb-cursor0 libxcb-cursor-dev libxcb-icccm4 libxcb-image0 \
          libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-shape0 \
          libxcb-xfixes0 libxcb-xinerama0 libxcb-xkb1 libxkbcommon-x11-0
        
    - name: Configure CMake
      run: cmake -B build -DCMAKE_BUILD_TYPE=Release
      
    - name: Build
      run: cmake --build build --config Release -j$(nproc)
      
    - name: Create AppDir structure
      run: |
        mkdir -p AppDir/usr/bin
        mkdir -p AppDir/usr/share/applications
        mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
        
        cp build/ARCNetScript AppDir/usr/bin/
        
        cat > AppDir/usr/share/applications/arcnetscript.desktop << EOF
        [Desktop Entry]
        Type=Application
        Name=ARC Net Script
        Exec=ARCNetScript
        Icon=arcnetscript
        Categories=Utility;HamRadio;
        Terminal=false
        EOF
        
        # Create a simple icon if none exists
        if [ ! -f icon.png ]; then
          convert -size 256x256 xc:blue -pointsize 72 -fill white -gravity center -annotate +0+0 "ARC" icon.png || true
        fi
        [ -f icon.png ] && cp icon.png AppDir/usr/share/icons/hicolor/256x256/apps/arcnetscript.png || true
        
    - name: Create AppImage
      run: |
        wget -q https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
        wget -q https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
        chmod +x linuxdeploy*.AppImage
        
        export QMAKE=$Qt6_DIR/bin/qmake
        export LD_LIBRARY_PATH=$Qt6_DIR/lib:$LD_LIBRARY_PATH
        export QT_PLUGIN_PATH=$Qt6_DIR/plugins
        
        # Run linuxdeploy with Qt plugin
        ./linuxdeploy-x86_64.AppImage --appdir AppDir --plugin qt --output appimage
        
        # Determine version
        if [ -n "${{ github.ref_name }}" ] && [[ "${{ github.ref_name }}" == v* ]]; then
          VERSION="${{ github.ref_name }}"
        else
          VERSION="dev"
        fi
        
        # Rename the AppImage
        for file in *.AppImage; do
          if [ -f "$file" ]; then
            mv "$file" "ARCNetScript-${VERSION}-Linux-x86_64.AppImage"
            break
          fi
        done
        
        # Verify AppImage was created
        if [ ! -f "ARCNetScript-${VERSION}-Linux-x86_64.AppImage" ]; then
          echo "ERROR: AppImage was not created successfully"
          exit 1
        fi
        
    - name: Create portable tarball
      run: |
        if [ -n "${{ github.ref_name }}" ] && [[ "${{ github.ref_name }}" == v* ]]; then
          VERSION="${{ github.ref_name }}"
        else
          VERSION="dev"
        fi
        
        mkdir -p portable/ARCNetScript
        cp build/ARCNetScript portable/ARCNetScript/
        cp -r $Qt6_DIR/lib/*.so* portable/ARCNetScript/ 2>/dev/null || true
        
        cd portable
        tar -czf ARCNetScript-${VERSION}-Linux-x86_64-portable.tar.gz ARCNetScript
        cd ..
        mv portable/ARCNetScript-${VERSION}-Linux-x86_64-portable.tar.gz .
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-build
        path: |
          ARCNetScript-*-Linux-x86_64.AppImage
          ARCNetScript-*-Linux-x86_64-portable.tar.gz
          build/ARCNetScript

  build-windows:
    runs-on: windows-2022
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.5.3'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2019_64'
        cache: true
        
    - name: Setup MSVC
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64
        
    - name: Configure CMake
      run: cmake -B build -DCMAKE_BUILD_TYPE=Release -G "NMake Makefiles"
      
    - name: Build
      run: cmake --build build --config Release
      
    - name: Deploy Qt dependencies
      shell: pwsh
      run: |
        mkdir deploy
        Copy-Item build\ARCNetScript.exe deploy\
        & "$env:Qt6_DIR\bin\windeployqt.exe" --release --no-translations --no-system-d3d-compiler --no-opengl-sw deploy\ARCNetScript.exe
        
        # Find and copy Visual C++ Runtime DLLs
        $requiredDlls = @(
          "msvcp140.dll",
          "msvcp140_1.dll",
          "msvcp140_2.dll",
          "vcruntime140.dll",
          "vcruntime140_1.dll"
        )
        
        $searchPaths = @(
          "C:\Windows\System32",
          "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Redist\MSVC\*\x64\Microsoft.VC143.CRT",
          "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Redist\MSVC\*\x64\Microsoft.VC142.CRT"
        )
        
        foreach ($dll in $requiredDlls) {
          $found = $false
          foreach ($searchPath in $searchPaths) {
            $matches = Get-ChildItem -Path $searchPath -Filter $dll -Recurse -ErrorAction SilentlyContinue
            if ($matches) {
              Copy-Item $matches[0].FullName deploy\
              Write-Host "Copied $dll from $($matches[0].DirectoryName)"
              $found = $true
              break
            }
          }
          if (-not $found) {
            Write-Host "Warning: $dll not found"
          }
        }
        
    - name: Create installer with NSIS
      shell: pwsh
      run: |
        # Determine version
        $version = "${{ github.ref_name }}"
        if (-not $version -or -not $version.StartsWith("v")) {
          $version = "dev"
        }
        
        # Create a simple NSIS script
        $nsisScript = @"
        !include "MUI2.nsh"
        !include "LogicLib.nsh"
        
        Name "ARC Net Script Generator"
        OutFile "ARCNetScript-${version}-Setup.exe"
        InstallDir "`$PROGRAMFILES64\ARCNetScript"
        RequestExecutionLevel admin
        
        !define MUI_ABORTWARNING
        !insertmacro MUI_PAGE_DIRECTORY
        !insertmacro MUI_PAGE_INSTFILES
        !insertmacro MUI_LANGUAGE "English"
        
        Section "Install"
          SetOutPath "`$INSTDIR"
          File /r "deploy\*.*"
          
          # Create shortcuts
          CreateShortcut "`$DESKTOP\ARC Net Script.lnk" "`$INSTDIR\ARCNetScript.exe"
          CreateDirectory "`$SMPROGRAMS\ARCNetScript"
          CreateShortcut "`$SMPROGRAMS\ARCNetScript\ARC Net Script.lnk" "`$INSTDIR\ARCNetScript.exe"
          CreateShortcut "`$SMPROGRAMS\ARCNetScript\Uninstall.lnk" "`$INSTDIR\Uninstall.exe"
          
          # Write uninstaller
          WriteUninstaller "`$INSTDIR\Uninstall.exe"
          
          # Write registry for Add/Remove Programs
          WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\ARCNetScript" "DisplayName" "ARC Net Script Generator"
          WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\ARCNetScript" "UninstallString" "`$INSTDIR\Uninstall.exe"
          WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\ARCNetScript" "Publisher" "W5ALC"
          WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\ARCNetScript" "DisplayVersion" "${version}"
        SectionEnd
        
        Section "Uninstall"
          # Remove files
          Delete "`$INSTDIR\*.*"
          RMDir /r "`$INSTDIR"
          
          # Remove shortcuts
          Delete "`$DESKTOP\ARC Net Script.lnk"
          Delete "`$SMPROGRAMS\ARCNetScript\*.*"
          RMDir "`$SMPROGRAMS\ARCNetScript"
          
          # Remove registry keys
          DeleteRegKey HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\ARCNetScript"
        SectionEnd
        "@
        
        Set-Content -Path "installer.nsi" -Value $nsisScript
        
    - name: Install NSIS
      shell: pwsh
      run: |
        choco install nsis -y
        
    - name: Build installer
      shell: pwsh
      run: |
        & "C:\Program Files (x86)\NSIS\makensis.exe" installer.nsi
        
    - name: Create portable ZIP
      shell: pwsh
      run: |
        $version = "${{ github.ref_name }}"
        if (-not $version -or -not $version.StartsWith("v")) {
          $version = "dev"
        }
        Compress-Archive -Path deploy\* -DestinationPath "ARCNetScript-${version}-Windows-x64-portable.zip"
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: |
          ARCNetScript-*-Setup.exe
          ARCNetScript-*-Windows-x64-portable.zip

  create-release:
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    - name: Display structure
      run: ls -R artifacts/
      
    - name: Create Release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/v')
      with:
        files: |
          artifacts/linux-build/ARCNetScript-*-Linux-x86_64.AppImage
          artifacts/linux-build/ARCNetScript-*-Linux-x86_64-portable.tar.gz
          artifacts/windows-build/ARCNetScript-*-Setup.exe
          artifacts/windows-build/ARCNetScript-*-Windows-x64-portable.zip
        draft: false
        prerelease: false
        generate_release_notes: true
        name: Release ${{ github.ref_name }}
        body: |
          ## Downloads
          
          ### Linux
          - **AppImage**: Portable, runs on most Linux distributions
          - **Portable tar.gz**: Extract and run
          
          ### Windows
          - **Setup.exe**: Installer with shortcuts (includes all required runtime libraries)
          - **Portable ZIP**: Extract and run, no installation needed (includes all required runtime libraries)
          
          ## Installation
          
          ### Linux AppImage
          ```bash
          chmod +x ARCNetScript-${{ github.ref_name }}-Linux-x86_64.AppImage
          ./ARCNetScript-${{ github.ref_name }}-Linux-x86_64.AppImage
          ```
          
          ### Windows
          Run the setup executable or extract the portable ZIP. All required Visual C++ runtime libraries are included.
          
          **Note**: If you still encounter missing DLL errors, please install the [Microsoft Visual C++ Redistributable](https://aka.ms/vs/17/release/vc_redist.x64.exe).
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
