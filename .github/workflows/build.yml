name: Build Qt Application

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.5.3'
        host: 'linux'
        target: 'desktop'
        arch: 'gcc_64'
        modules: 'qtbase qttools'
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libgl1-mesa-dev libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-render-util0 libxcb-xinerama0 libxcb-cursor0
        
    - name: Create build directory
      run: mkdir build
      
    - name: Configure with qmake
      working-directory: build
      run: qmake ../net-script.pro
      
    - name: Build
      working-directory: build
      run: make -j$(nproc)
      
    - name: Prepare AppImage
      run: |
        mkdir -p appdir/usr/bin
        mkdir -p appdir/usr/share/applications
        mkdir -p appdir/usr/share/icons/hicolor/256x256/apps
        
        cp build/net-script appdir/usr/bin/
        
        # Create desktop file
        cat > appdir/usr/share/applications/net-script.desktop << EOF
        [Desktop Entry]
        Type=Application
        Name=Amateur Radio Net Script
        Exec=net-script
        Icon=net-script
        Categories=Utility;HamRadio;
        EOF
        
        # Copy icon if it exists, otherwise create a placeholder
        if [ -f icon.png ]; then
          cp icon.png appdir/usr/share/icons/hicolor/256x256/apps/net-script.png
        fi
        
    - name: Download linuxdeploy and create AppImage
      run: |
        wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
        wget https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
        chmod +x linuxdeploy*.AppImage
        
        export QMAKE=$Qt6_DIR/bin/qmake
        export LD_LIBRARY_PATH=$Qt6_DIR/lib:$LD_LIBRARY_PATH
        
        ./linuxdeploy-x86_64.AppImage --appdir appdir --plugin qt --output appimage
        
    - name: Rename AppImage
      run: |
        if [ -f Amateur_Radio_Net_Script*.AppImage ]; then
          mv Amateur_Radio_Net_Script*.AppImage ARCNetScript-linux-x86_64.AppImage
        else
          mv *.AppImage ARCNetScript-linux-x86_64.AppImage 2>/dev/null || true
        fi
        
    - name: Upload Linux artifact
      uses: actions/upload-artifact@v4
      with:
        name: linux-build
        path: |
          ARCNetScript-linux-x86_64.AppImage
          build/net-script

  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.5.3'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2019_64'
        modules: 'qtbase qttools'
        
    - name: Setup MSVC
      uses: microsoft/setup-msbuild@v1.3
      
    - name: Configure environment
      shell: cmd
      run: |
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        
    - name: Create build directory
      run: mkdir build
      
    - name: Configure with qmake
      working-directory: build
      shell: cmd
      run: |
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        qmake ..\net-script.pro
        
    - name: Build
      working-directory: build
      shell: cmd
      run: |
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        nmake
        
    - name: Deploy Qt dependencies
      working-directory: build
      shell: cmd
      run: |
        mkdir deploy
        copy release\net-script.exe deploy\
        windeployqt --release --no-translations deploy\net-script.exe
        
    - name: Create portable package
      working-directory: build
      shell: pwsh
      run: |
        Compress-Archive -Path deploy\* -DestinationPath ARCNetScript-windows-x64.zip
        
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: build/ARCNetScript-windows-x64.zip

  create-release:
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          linux-build/ARCNetScript-linux-x86_64.AppImage
          windows-build/ARCNetScript-windows-x64.zip
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
